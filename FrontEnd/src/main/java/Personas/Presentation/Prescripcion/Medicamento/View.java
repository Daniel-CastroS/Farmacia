package Personas.Presentation.Prescripcion.Medicamento;

import Personas.Logic.Medicamento;
import Personas.Presentation.Prescripcion.Controller;
import Personas.Presentation.Prescripcion.Detalle.Detalle;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.stream.Collectors;

public class View extends JDialog {
    private JPanel contentPane;
    private JButton buttonAgregar;
    private JButton buttonCancelar;
    private JTable tableMedicamentos;
    private JTextField textFieldFiltro;
    private JButton buttonFiltrar;

    private Controller controller;
    private List<Medicamento> medicamentos;
    private List<Medicamento> medicamentosFiltrados;

    public View(Controller controller, List<Medicamento> medicamentos) {
        this.controller = controller;
        this.medicamentos = medicamentos;
        this.medicamentosFiltrados = medicamentos; // inicialmente todos

        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonAgregar);

        initTable();

        // Botón agregar
        buttonAgregar.addActionListener(e -> onAgregar());

        // Botón cancelar
        buttonCancelar.addActionListener(e -> dispose());

        // Botón filtrar
        buttonFiltrar.addActionListener(e -> filtrarPorCodigo());

        // cerrar con X
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                dispose();
            }
        });

        // cerrar con ESC
        contentPane.registerKeyboardAction(e -> dispose(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void initTable() {
        int[] cols = {TableModelMedicamentos.CODIGO, TableModelMedicamentos.NOMBRE, TableModelMedicamentos.PRESENTACION};
        tableMedicamentos.setModel(new TableModelMedicamentos(cols, medicamentosFiltrados));
        tableMedicamentos.setRowHeight(25);
    }

    private void filtrarPorCodigo() {
        String filtro = textFieldFiltro.getText().trim();
        if (filtro.isEmpty()) {
            medicamentosFiltrados = medicamentos; // mostrar todos
        } else {
            medicamentosFiltrados = medicamentos.stream()
                    .filter(m -> m.getCodigo().equals(filtro))
                    .collect(Collectors.toList());
        }
        int[] cols = {TableModelMedicamentos.CODIGO, TableModelMedicamentos.NOMBRE, TableModelMedicamentos.PRESENTACION};
        tableMedicamentos.setModel(new TableModelMedicamentos(cols, medicamentosFiltrados));
    }

    private void onAgregar() {
        int row = tableMedicamentos.getSelectedRow();
        if (row != -1) {
            Medicamento seleccionado = medicamentosFiltrados.get(row);

            // Abrir MiniView de detalle
            Detalle detalleDialog =
                    new Detalle(controller, controller.getModel().getCurrent(), seleccionado, -1);
            detalleDialog.mostrar();
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un medicamento");
        }
    }

    public void mostrar() {
        pack();
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Filtrar por codigo:");
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldFiltro = new JTextField();
        contentPane.add(textFieldFiltro, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonFiltrar = new JButton();
        buttonFiltrar.setIcon(new ImageIcon(getClass().getResource("/search.png")));
        buttonFiltrar.setText("Buscar");
        contentPane.add(buttonFiltrar, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tableMedicamentos = new JTable();
        panel1.add(tableMedicamentos, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel2, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel2.add(panel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonAgregar = new JButton();
        buttonAgregar.setText("Save");
        panel3.add(buttonAgregar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancelar = new JButton();
        buttonCancelar.setText("Cancel");
        panel3.add(buttonCancelar, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}