package Personas.Presentation.Sesion;

import Personas.Application;
import Personas.Logic.Service;
import Personas.Logic.Trabajador;
import Personas.Presentation.Sesion.Controller;
import Personas.Presentation.Sesion.Model;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

public class View extends JDialog implements PropertyChangeListener {
    private JPanel panel1;
    private JButton xButton;
    private JButton loginButton;
    private JTextField textFieldId;
    private JTextField textFieldClave;
    private JLabel clave;
    private JLabel id;
    private JButton extraButton;

    Controller controller;
    Model model;

    public View() {
        $$$setupUI$$$();
        setContentPane(panel1);
        setModal(true);
        getRootPane().setDefaultButton(loginButton);

        xButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onX();
            }
        });

        loginButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onLoggin();
            }
        });

        extraButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onExtra();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onX();
            }
        });

        // call onCancel() on ESCAPE
        panel1.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onX();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // Aquí puedes manejar los cambios en el modelo si es necesario
    }

    public void setController(Controller controller) {
        this.controller = controller;
    }

    public void setModel(Model model) {
        this.model = model;
        model.addPropertyChangeListener(this);
    }

    private void onLoggin() {
        Trabajador trabajador = new Trabajador();
        trabajador.setId(textFieldId.getText());

        try {
            // Buscamos al trabajador en la base de datos
            trabajador = Service.instance().readTrabajador(trabajador);

            if (trabajador == null) {
                JOptionPane.showMessageDialog(this, "Usuario no existe");
            } else if (trabajador.getClave_sistema().equals(textFieldClave.getText())) {
                // Si la contraseña es correcta, se hace login
                controller.login(trabajador);
                dispose(); // cerramos ventana de login
            } else {
                JOptionPane.showMessageDialog(this, "Clave incorrecta");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Usuario no existe");
        }
    }

    private void onX() {
        dispose();
    }

    private void resetField(JTextField field) {
        field.setBackground(null);
        field.setToolTipText(null);
    }

    private void onExtra() {
        Personas.Presentation.Sesion.Contra.View contraView = new Personas.Presentation.Sesion.Contra.View();
        contraView.setIconImage((new ImageIcon(Application.class.getResource("/forms.png")).getImage()));
        contraView.setTitle("Cambiar Contraseña");
        contraView.setSize(400, 300);
        contraView.pack();
        contraView.setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/user.png")));
        label1.setText("");
        panel2.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        id = new JLabel();
        id.setText("ID");
        panel2.add(id, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clave = new JLabel();
        clave.setText("Clave");
        panel2.add(clave, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldId = new JTextField();
        panel2.add(textFieldId, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textFieldClave = new JPasswordField();
        panel2.add(textFieldClave, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(10, 10, 10, 10), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setIcon(new ImageIcon(getClass().getResource("/enter.png")));
        loginButton.setText("");
        panel3.add(loginButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xButton = new JButton();
        xButton.setIcon(new ImageIcon(getClass().getResource("/close.png")));
        xButton.setText("");
        panel3.add(xButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        extraButton = new JButton();
        extraButton.setIcon(new ImageIcon(getClass().getResource("/password.png")));
        extraButton.setText("");
        panel3.add(extraButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
